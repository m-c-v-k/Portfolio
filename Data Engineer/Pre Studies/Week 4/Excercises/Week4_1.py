#! Python3

"""
Coding Challenge 1 - Extending Counter from week 3
In this challenge we are going to turn our my_counter function from week 3 into a class and add
some functionality to it. You are of course welcome to reuse your code from week 3 where
applicable. We are going to need the following steps and functionality:
• Create a class called MyCounter (as it is costumery to capitalize class names in Python).
• Make a constructor that takes in one argument for the inps to count (apart from “self” of
course).
• Create the counter and save it to a field.
• Create a method called get that takes in a key and returns the count for that key. Make it
such that the method prints a message if the key is not found in the counter dictionary. It is
important that you do not throw an error here!
• Define the __str__ method to pretty print the counter dictionary.
"""

# Importing necessary libraries
from collections import defaultdict


class MyCounter:
    """ MyCounter class.
    """

    def __init__(self, inp):
        """ Constructor function, adds input to counter_dict.
        Args:
            inp (string/list): A string or list to be counted.
        """
        # Creating a default dictionary
        self.counter_dict = defaultdict(lambda: "Not present")

        # Check if items exists, add to existing or add new entry
        for x in range(len(inp)):
            if inp[x] in self.counter_dict:
                self.counter_dict[inp[x]] += 1
            elif inp[x] not in self.counter_dict:
                self.counter_dict[inp[x]] = 1

    def get(self, key_item):
        """ Prints the value for given key, gives not present if key does not exist.
        Args:
            key_item (string/int): A string or int to be checked against keys in counter_dict.
        """
        print(self.counter_dict[key_item])

    def __str__(self):
        """ Handles printing.
        Returns:
            string: A string printed with all keys and their corresponding values.
        """
        self.output = "The counter_dict contains:\n"

        for key, value in self.counter_dict.items():
            self.output += f"{key}: {value}\n"

        my_string = f"Number of keys = {len(self.counter_dict.keys())}"

        self.output += my_string

        return self.output


# Functionality testing
print(MyCounter('lallala'))
MyCounter('lallala').get('o')
print(MyCounter('hello'))
x = MyCounter([1, 2, 3, 4, 2, 1, 3, 5, 7, 5, 3, 5, 6, 2, 3, 3])
x.get(2)


my_string = '''34
165
217
154
46
80
60
14
199
53
70
208
48
131
70
183
191
220
148
187
118
171
170
121
206
74
169
231
162
187
15
138
126
74
11
199
229
80
133
4
144
98
161
66
212
56
75
22
52
163
42
39
148
73
59
37
107
97
227
32
53
82
25
117
141
167
140
9
60
161
207
62
76
159
213
231
165
42
100
69
10
142
141
72
59
90
225
3
7
188
209
209
118
180
28
60
143
171
129
22
144
126
10
69
101
23
64
189
121
80
201
197
24
164
25
198
211
183
223
158
50
173
6
144
65
14
154
143
145
89
223
118
135
9
14
24
207
193
135
229
33
198
12
143
141
40
22
72
206
197
94
105
210
19
7
102
69
20
190
230
148
199
225
86
53
69
59
68
179
85
33
36
141
71
135
180
173
201
219
213
91
32
108
104
226
194
13
213
80
169
72
104
80
229
95
61
216
69
43
45
202
190
215
25
217
125
21
49
197
130
224
54
41
225
172
198
158
212
43
82
75
208
178
74
194
131
18
204
104
99
73
128
76
104
205
123
14
193
142
114
119
109
155
137
99
75
130
34
25
152
53
207
48
172
94
202
177
157
112
144
88
212
137
92
77
97
54
230
11
213
168
127
141
218
37
198
119
228
92
84
43
17
219
219
215
10
15
173
142
2
101
91
186
62
69
73
78
83
75
76
114
215
23
40
171
29
191
23
133
228
228
136
121
14
136
41
113
80
195
52
43
137
216
182
116
100
15
184
5
173
151
65
41
146
4
24
9
51
189
196
230
49
192
111
123
92
99
144
112
22
127
71
99
164
143
227
95
215
40
83
6
81
93
156
83
66
78
150
163
105
199
172
15
38
19
200
230
91
161
180
139
6
127
55
206
175
188
142
161
184
174
226
4
37
137
206
107
101
108
186
112
198
119
194
189
3
54
27
185
213
151
156
127
194
208
173
44
226
141
127
13
35
141
100
30
160
187
88
72
195
24
112
142
198
32
166
184
105
144
204
50
20
101
106
58
127
223
211
46
229
129
1
115
228
191
11
94
218
162
11
43
49
89
79
196
187
141
229
6
98
206
26
210
141
174
122
85
81
162
76
102
69
210
178
86
61
111
61
88
229
49
73
1
198
196
219
38
203
58
103
30
125
38
71
20
131
18
189
221
144
69
149
37
91
32
87
48
104
221
112
112
46
143
231
62
74
122
22
195
90
203
140
198
163
225
41
180
183
137
137
60
63
94
104
200
146
45
47
192
71
170
156
5
152
11
145
28
77
122
161
79
142
188
164
186
143
13
78
98
2
116
211
48
220
114
206
228
229
19
150
225
69
141
230
221
109
201
162
37
59
159
39
173
58
102
150
100
158
196
100
74
208
3
143
13
69
3
159
197
226
118
127
63
34
175
76
142
93
32
68
47
175
171
52
212
231
98
103
77
157
33
222
198
18
29
2
97
85
141
125
183
45
37
152
114
21
183
186
63
77
113
150
95
7
117
69
25
98
104
17
161
131
153
59
116
200
48
48
130
116
11
120
162
1
81
82
48
157
87
26
137
223
52
105
19
197
104
161
151
199
69
60
135
217
170
140
12
76
119
121
227
83
150
191
189
171
23
114
126
226
130
25
167
124
59
106
17
85
6
16
146
28
8
180
88
128
161
156
102
178
119
181
46
45
199
202
70
139
70
56
172
83
78
12
61
190
112
131
107
71
204
22
187
192
215
165
115
33
160
11
62
3
131
65
126
136
48
113
131
78
156
96
174
188
69
196
219
37
23
146
11
56
102
207
209
66
65
135
225
164
123
217
3
41
72
231
168
145
170
29
169
6
62
169
216
5
34
150
208
120
227
146
144
32
212
221
65
193
183
226
87
140
162
46
77
120
96
226
30
192
98
111
131
19
98
71
182
31
224
41
119
104
204
113
19
12
215
99
171
83
228
183
168
230
138
197
189
84
1
22
211
33
174
112
79
80
125
23
96
210
21
215
94
209
35
173
71
17
59
143
175
99
162
197
122
216
8
151
46
59
186
64
111
21
120
73
197
124
106
1
82
93
100
225
80
142
191
119
130
127
66
229
88
9
187
151
231
164
221
116
12
204
44
55
4
224
202
5
89
180
209
172
43
149
214
9'''

x = my_string.split('\n')
print(x)

print(MyCounter(x))
print(len(counter_dict))
